{"version":3,"file":"static/js/76.c92e9e86.chunk.js","mappings":"2PACA,EAA2B,uBAA3B,EAA8D,wB,mBCOzCA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAAA,EAAAA,IAAAA,MAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,UAAAA,GACT,OADSA,EAAAA,EAAAA,KAAAA,MAAAA,EAAAA,CAAAA,MAAAA,OAAAA,KACjBC,MAAQ,CACJC,KAAM,IADF,EAuCP,OAvCO,yCAIR,WAAqB,IAAD,OACVC,EAAUC,KAAKC,MAAMC,MAAMC,OAAOJ,QACxCK,IAAAA,IAAA,iBACmBL,EADnB,4BATQ,qCAWHM,MAAK,SAAAC,GAAQ,OAAI,EAAKC,SAAS,CAAET,KAAMQ,EAASE,KAAKV,UACrDW,OAAM,SAAAC,GAAK,OAAIC,QAAQD,MAAMA,QACrC,oBAED,WACI,IAAQZ,EAASE,KAAKH,MAAdC,KAER,OACI,eAAIc,UAAWC,EAAf,SACKf,EAAKgB,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UAQjC,OAHID,EAHCA,EAGW,6CAAyCA,GAFtCE,GAMf,2BACI,gBAAKC,IAAKH,EAAcI,IAAKL,KAE7B,iBAAKJ,UAAWC,EAAhB,WACI,2BAAI,kCAAJ,IAAmBG,MACnB,2BAAI,sCAAJ,IAAuBE,UALtBH,YAa5B,EAxCgBnB,CAAa0B,EAAAA,Y","sources":["webpack://react-homework-template/./src/components/Cast/Cast.module.css?c9ee","components/Cast/Cast.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"castList\":\"Cast_castList__ARoWn\",\"actorDesc\":\"Cast_actorDesc__b65w-\"};","import axios from \"axios\";\nimport { Component } from \"react\";\nimport styles from './Cast.module.css';\nimport defaultCast from \"../../static/defaultCast.jpg\";\nimport propTypes from \"prop-types\";\n\nconst API_KEY = '170b9b9397b0574b7d603cba918ea1f4';\n\nexport default class Cast extends Component {\n    state = {\n        cast: [],\n    };\n\n    componentDidMount() {\n        const movieId = this.props.match.params.movieId;\n        axios\n            .get(`/movie/${movieId}/credits?api_key=${API_KEY}`)\n            .then(response => this.setState({ cast: response.data.cast }))\n            .catch(error => console.error(error));\n    }\n\n    render() {\n        const { cast } = this.state;\n\n        return (\n            <ul className={styles.castList}>\n                {cast.map(({ id, name, profile_path, character }) => {\n\n                    if (!profile_path) {\n                        profile_path = defaultCast;\n                    } else {\n                        profile_path = `https://image.tmdb.org/t/p/original${profile_path}`;\n                    }\n\n                    return (\n                        <li key={id}>\n                            <img src={profile_path} alt={name} />\n\n                            <div className={styles.actorDesc}>\n                                <h3><b>Actor:</b> {name}</h3>\n                                <h3><b>Character:</b> {character}</h3>\n                            </div>\n\n                        </li>\n                    );\n                })}\n            </ul>\n        );\n    }\n}\n\nCast.propTypes = {\n    match: propTypes.object.isRequired,\n}"],"names":["Cast","state","cast","movieId","this","props","match","params","axios","then","response","setState","data","catch","error","console","className","styles","map","id","name","profile_path","character","defaultCast","src","alt","Component"],"sourceRoot":""}